plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'jacoco'
    id 'com.spotify.ruler'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'com.diffplug.spotless' version '6.15.0'
}

apply from: './gradle/properties.gradle'
apply from: './gradle/jacoco.gradle'
apply from: './gradle/sonarqube.gradle'

android {
    compileSdk 33

    defaultConfig {
        applicationId "pk.sufiishq.app"
        minSdk 24
        targetSdk 33
        versionCode 24
        versionName "2.5"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true

            buildConfigField "Boolean", "ENABLE_CRASHLYTICS", "${getBoolProperty("debug.crashlytics.enable", false)}"
        }
        release {

            buildConfigField "Boolean", "ENABLE_CRASHLYTICS", "${getBoolProperty("release.crashlytics.enable", true)}"

            ndk {
                debugSymbolLevel = "FULL"
            }

            // FIXME disable this for now because android jetpack compose navigation failed with minification enable https://stackoverflow.com/questions/75475360/jetpack-compose-navigation-throwing-exception-in-release-build-if-minify-has-ena
            minifyEnabled false
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        freeCompilerArgs = ['-Xjvm-default=all-compatibility']
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion '1.5.21'
    }
    packagingOptions {
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'license.html'
        exclude 'readme.html'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/license.html'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'META-INF/sun-jaxb.episode'
        exclude("META-INF/*.kotlin_module")
        exclude("META-INF/AL2.0")
        exclude("META-INF/LGPL2.1")
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                beforeTest { testDescriptor ->
                    println "${testDescriptor.className} > ${testDescriptor.name} STARTED"
                }
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        }
    }
}

ruler {
    abi.set("arm64-v8a")
    locale.set("en")
    screenDensity.set(480)
    sdkVersion.set(27)
}

spotless {
    kotlin {
        target 'src/**/*.kt'
        ktlint('0.48.2').userData(['indent_size': '4', 'continuation_indent_size': '4'])
        licenseHeaderFile "${rootProject.projectDir}/license-header.txt"
    }

    format 'xml', {
        target "${rootProject.projectDir}/app/src/**/*.xml"
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }

    format 'json', {
        target "${rootProject.projectDir}/app/src/**/*.json"
        indentWithSpaces(4)
        trimTrailingWhitespace()
    }
}

apply from: './gradle/deps.gradle'

def getBoolProperty(String key, Boolean defaultValue) {
    if (project.ext.has(key)) {
        return project.ext.get(key)
    } else {
        return defaultValue
    }
}
